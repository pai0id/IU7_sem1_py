# Поляков Андрей ИУ7-12Б
#
# Программа, которая по введенным целочисленным
# координатам трех точек на плоскости вычисляет длины сторон
# образованного треугольника и длину биссектрисы, проведенной
# из наибольшего угла, определяет, является ли треугольник остроугольным
# и по заданным координатам точки определяет, принадлежит ли она треугольнику
# и находит расстояние от нее до треугольника


from math import cos, acos  # подключение модуля math


print("Точка 1:")
x1 = int(input("Введите координату х точки 1: "))  # Ввод координат первой вершины треугольника
y1 = int(input("Введите координату y точки 1: "))
print("Точка 2:")
x2 = int(input("Введите координату х точки 2: "))  # Ввод координат второй вершины треугольника
y2 = int(input("Введите координату y точки 2: "))
print("Точка 3:")
x3 = int(input("Введите координату х точки 3: "))  # Ввод координат третьей вершины треугольника
y3 = int(input("Введите координату y точки 3: "))


ab = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5  # Рассчет длины первой стороны треугольника
bc = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5  # Рассчет длины второй стороны треугольника
ac = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5  # Рассчет длины третьей стороны треугольника
if ab + bc > ac and ac + bc > ab and ab + ac > bc:  # Проверка, существует ли треугольник
    sum_near_angle = ab + bc + ac - max(ab, bc, ac)  # Сумма сторон, прилегающих к наибольшему углу
    comp_near_angle = ab * bc * ac / max(ab, bc, ac)  # Произведение сторон, прилегающих к наибольшему углу
    cos_angle = (ab ** 2 + bc ** 2 + ac ** 2 - 2 * max(ab, bc, ac) ** 2) / (2 * comp_near_angle)  # Косинус наиб. угла
    cos_half_angle = cos(acos(cos_angle) / 2)
    bisect = (2 * comp_near_angle * cos_half_angle) / sum_near_angle  # Вычисление длины биссектрисы
    is_sharp = True if cos_angle > 0 else False  # Определение вида треугольника
    print("Длины сторон треугольника: {0:.7g}, {1:.7g}, {2:.7g}".format(ab, bc, ac))  # Вывод длиин сторон треугольника
    print("Длина биссектрисы: {0:.7g}".format(bisect))  # Вывод длины биссектрисы
    if is_sharp:
        print("Треугольник остроугольный")  # Вид треугольника
    else:
        print("Треугольник не остроугольный")
    x0 = int(input("Введите координату х точки: "))  # Ввод координат произвольной точки
    y0 = int(input("Введите координату y точки: "))
    s_main = 0.5 * (x1 * (y2 - y3) - x2 * (y1 - y3) + x3 * (y1 - y2))  # Вычисление площади треугольника
    s_1 = 0.5 * (x0 * (y2 - y3) - x2 * (y0 - y3) + x3 * (y0 - y2))  # и треугольников, образованных данной точкой
    s_2 = 0.5 * (x1 * (y0 - y3) - x0 * (y1 - y3) + x3 * (y1 - y0))
    s_3 = 0.5 * (x1 * (y2 - y0) - x2 * (y1 - y0) + x0 * (y1 - y2))  # Точка лежит внутри треугольника, если полученные
    belongs = True if s_main == s_1 + s_2 + s_3 else False          # треугольники образуют исходный
    if belongs:
        h1 = abs(s_1 * 2 / bc)
        h2 = abs(s_2 * 2 / ac)  # Вычисление расстояния через формулу площади треугольника
        h3 = abs(s_3 * 2 / ab)
        h = min(h1, h2, h3)
        print("Точка находится внутри треугольника")
        print("Расстояние от точки до треугольника: {:.7g}".format(h))  # Вывод расстояния от точки до треугольника
    else:
        print("Точка находится вне треугольника")
else:
    print("Треугольник не сущуествует")
